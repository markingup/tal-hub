#!/usr/bin/env node

/**
 * TALHub RLS Policy Fix Script
 * 
 * This script applies the fixed RLS policies to the Supabase database.
 * Run with: node scripts/fix-rls-policies.js
 * 
 * Note: This requires the service role key or admin access to modify RLS policies.
 * For now, we'll provide instructions for manual application.
 */

const https = require('https')
require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing Supabase environment variables')
  process.exit(1)
}

console.log('üîß RLS Policy Fix Instructions')
console.log('================================')
console.log('')
console.log('The RLS policies need to be updated to allow proper case creation and access.')
console.log('Since we only have the anon key, you need to apply these fixes manually:')
console.log('')
console.log('1. Go to your Supabase Dashboard:')
console.log(`   ${supabaseUrl.replace('/rest/v1', '')}`)
console.log('')
console.log('2. Navigate to: Authentication ‚Üí Policies')
console.log('')
console.log('3. For the "cases" table, update the policies:')
console.log('')
console.log('   DROP POLICY IF EXISTS "Users can view cases they participate in" ON cases;')
console.log('   DROP POLICY IF EXISTS "Users can create cases" ON cases;')
console.log('   DROP POLICY IF EXISTS "Users can update cases they participate in" ON cases;')
console.log('')
console.log('   CREATE POLICY "Users can view cases they participate in or created" ON cases')
console.log('       FOR SELECT USING (')
console.log('           auth.uid() = created_by OR')
console.log('           EXISTS (')
console.log('               SELECT 1 FROM case_participants cp')
console.log('               WHERE cp.case_id = cases.id AND cp.user_id = auth.uid()')
console.log('           )')
console.log('       );')
console.log('')
console.log('   CREATE POLICY "Users can create cases" ON cases')
console.log('       FOR INSERT WITH CHECK (auth.uid() = created_by);')
console.log('')
console.log('   CREATE POLICY "Users can update cases they participate in or created" ON cases')
console.log('       FOR UPDATE USING (')
console.log('           auth.uid() = created_by OR')
console.log('           EXISTS (')
console.log('               SELECT 1 FROM case_participants cp')
console.log('               WHERE cp.case_id = cases.id AND cp.user_id = auth.uid()')
console.log('           )')
console.log('       );')
console.log('')
console.log('4. For the "case_participants" table, update the policies:')
console.log('')
console.log('   DROP POLICY IF EXISTS "Users can view case participants" ON case_participants;')
console.log('   DROP POLICY IF EXISTS "Users can add participants to cases they participate in" ON case_participants;')
console.log('   DROP POLICY IF EXISTS "Users can remove themselves from cases" ON case_participants;')
console.log('')
console.log('   CREATE POLICY "Users can view case participants" ON case_participants')
console.log('       FOR SELECT USING (')
console.log('           EXISTS (')
console.log('               SELECT 1 FROM cases c')
console.log('               WHERE c.id = case_participants.case_id AND c.created_by = auth.uid()')
console.log('           ) OR')
console.log('           EXISTS (')
console.log('               SELECT 1 FROM case_participants cp')
console.log('               WHERE cp.case_id = case_participants.case_id AND cp.user_id = auth.uid()')
console.log('           )')
console.log('       );')
console.log('')
console.log('   CREATE POLICY "Users can add participants to cases they created or participate in" ON case_participants')
console.log('       FOR INSERT WITH CHECK (')
console.log('           (')
console.log('               EXISTS (')
console.log('                   SELECT 1 FROM cases c')
console.log('                   WHERE c.id = case_participants.case_id AND c.created_by = auth.uid()')
console.log('               )')
console.log('           ) OR')
console.log('           (')
console.log('               EXISTS (')
console.log('                   SELECT 1 FROM case_participants cp')
console.log('                   WHERE cp.case_id = case_participants.case_id AND cp.user_id = auth.uid()')
console.log('               )')
console.log('           )')
console.log('       );')
console.log('')
console.log('   CREATE POLICY "Users can remove themselves from cases" ON case_participants')
console.log('       FOR DELETE USING (auth.uid() = user_id);')
console.log('')
console.log('   CREATE POLICY "Case creators can remove participants" ON case_participants')
console.log('       FOR DELETE USING (')
console.log('           EXISTS (')
console.log('               SELECT 1 FROM cases c')
console.log('               WHERE c.id = case_participants.case_id AND c.created_by = auth.uid()')
console.log('           )')
console.log('       );')
console.log('')
console.log('5. After applying these policies, run the test user creation script again:')
console.log('   node scripts/create-test-user.js')
console.log('')
console.log('6. Then test the application by signing in with:')
console.log('   Email: testuser@gmail.com')
console.log('   Password: testpassword')
console.log('')
console.log('Alternative: If you have the service role key, you can run the SQL directly')
console.log('in the Supabase SQL Editor using the contents of scripts/fix-rls-policies.sql')
